@misc{noauthor_upm-robotics/uarm_2019,
	title = {{UPM}-{Robotics}/uarm},
	copyright = {GPL-3.0},
	url = {https://github.com/UPM-Robotics/uarm},
	abstract = {Práctica de Manipuladores con el robot uArm. Contribute to UPM-Robotics/uarm development by creating an account on GitHub.},
	urldate = {2019-11-02},
	publisher = {Robotics UPM},
	month = nov,
	year = {2019},
	note = {original-date: 2019-11-01T11:13:54Z}
}

@misc{noauthor_uarm_2019,
	title = {{uArm} pro {User} {Manual} v1.1.0.pdf},
	url = {http://download.ufactory.cc/docs/en/uArm%20pro%20User%20Manual%20v1.1.0.pdf},
	language = {en},
	urldate = {2019-11-02},
	year = {2019},
	file = {uArm pro User Manual v1.1.0.pdf:/home/javinator9889/Zotero/storage/ZYJPBDJC/uArm pro User Manual v1.1.0.pdf:application/pdf}
}

@misc{noauthor_uarm_2019-1,
	title = {{uArm} {Swift} {Pro}\_Developer {Guide} v1.0.6.pdf},
	url = {http://download.ufactory.cc/docs/en/uArm%20Swift%20Pro_Developer%20Guide%20v1.0.6.pdf},
	language = {en},
	urldate = {2019-11-02},
	year = {2019},
	file = {uArm Swift Pro_Developer Guide v1.0.6.pdf:/home/javinator9889/Zotero/storage/J8LNPZ3U/uArm Swift Pro_Developer Guide v1.0.6.pdf:application/pdf}
}

@misc{noauthor_uarm-swift-specifications-171012.pdf_2019,
	title = {{uArm}-{Swift}-{Specifications}-171012.pdf},
	url = {http://download.ufactory.cc/docs/en/uArm-Swift-Specifications-171012.pdf},
	language = {en},
	urldate = {2019-11-02},
	year = {2019},
	file = {uArm-Swift-Specifications-171012.pdf:/home/javinator9889/Zotero/storage/4KMTHBCH/uArm-Swift-Specifications-171012.pdf:application/pdf}
}

@misc{travisdewolf_robot_2013,
	title = {Robot control part 2: {Jacobians}, velocity, and force},
	shorttitle = {Robot control part 2},
	url = {https://studywolf.wordpress.com/2013/09/02/robot-control-jacobians-velocity-and-force/},
	abstract = {Jacobian matrices are a super useful tool, and heavily used throughout robotics and control theory. Basically, a Jacobian defines the dynamic relationship between two different representations of a…},
	language = {en},
	urldate = {2019-11-17},
	journal = {studywolf},
	author = {{travisdewolf}},
	month = sep,
	year = {2013},
	file = {Snapshot:/home/javinator9889/Zotero/storage/QYS68MFH/robot-control-jacobians-velocity-and-force.html:text/html}
}

@misc{noauthor_trajectory_nodate,
	title = {Trajectory {Planning} for {Robot} {Manipulators}},
	url = {https://www.youtube.com/watch?v=Fd7wjZDoh7g&feature=emb_title},
	abstract = {Sebastian Castro discusses technical concepts, practical tips, and software examples for motion trajectory planning with robot manipulators.
- Visit the MATLAB and Simulink Robotics Arena: http://bit.ly/2DUdmJW

First, Sebastian introduces the difference between task space and joint space trajectories and outlines the advantages and disadvantages of each approach. Then he describes various common techniques such as trapezoidal trajectories, polynomial trajectories, and rotation interpolation.

Throughout the video, you will see several MATLAB® and Simulink® examples testing different types of trajectory generation and execution using a 3D model of the seven-degrees-of-freedom Kinova® Gen3 Ultra lightweight robot.

For more information, refer to these links:

Robot Manipulation, Part 1: Kinematics: http://bit.ly/2WhXhaB
Robot Manipulation, Part 2: Dynamics and Control: http://bit.ly/2W9URui
Manipulator Shape Tracing in MATLAB and Simulink: http://bit.ly/2W9UU9s

--------------------------------------------------------------------------------------------------------
Get a free product Trial: https://goo.gl/ZHFb5u
Learn more about MATLAB: https://goo.gl/8QV7ZZ
Learn more about Simulink: https://goo.gl/nqnbLe
See What's new in MATLAB and Simulink: https://goo.gl/pgGtod

© 2019 The MathWorks, Inc. MATLAB and Simulink are registered
trademarks of The MathWorks, Inc. 
See www.mathworks.com/trademarks for a list of additional trademarks. Other product or brand names may be trademarks or registered trademarks of their respective holders.},
	urldate = {2019-11-17}
}

@misc{noauthor_inverse_2019,
	title = {Inverse kinematics},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Inverse_kinematics&oldid=923148435},
	abstract = {Inverse kinematics is the mathematical process of recovering the movements of an object in the world from some other data, such as a film of those movements, or a film of the world as seen by a camera which is itself making those movements. This is useful in robotics and in film animation.
In robotics, inverse kinematics makes use of the kinematics equations to determine the joint parameters that provide a desired position for each of the robot's end-effectors. Specification of the movement of a robot so that its end-effectors achieve the desired tasks is known as motion planning.  Inverse kinematics transforms the motion plan into joint actuator trajectories for the robot. Similar formulae determine the positions of the skeleton of an animated character that is to move in a particular way in a film, or of a vehicle such as a car or boat containing the camera which is shooting a scene of a film. Once a vehicle's motions are known, they can be used to determine the constantly-changing viewpoint for computer-generated imagery of objects in the landscape such as buildings, so that these objects change in perspective while themselves not appearing to move as the vehicle-borne camera goes past them.
The movement of a kinematic chain, whether it is a robot or an animated character, is modeled by the kinematics equations of the chain.  These equations define the configuration of the chain in terms of its joint parameters.  Forward kinematics uses the joint parameters to compute the configuration of the chain, and inverse kinematics reverses this calculation to determine the joint parameters that achieve a desired configuration.},
	language = {en},
	urldate = {2019-11-17},
	journal = {Wikipedia},
	month = oct,
	year = {2019},
	note = {Page Version ID: 923148435},
	file = {Snapshot:/home/javinator9889/Zotero/storage/GVZ8B7F7/index.html:text/html}
}

@misc{noauthor_moorepenrose_2019,
	title = {Moore–{Penrose} inverse},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Moore%E2%80%93Penrose_inverse&oldid=926414640},
	abstract = {In mathematics, and in particular linear algebra, a pseudoinverse A+ of a  matrix A is a generalization of the inverse matrix.  The most widely known type of matrix pseudoinverse is the Moore–Penrose inverse, which was independently described by E. H. Moore in 1920, Arne Bjerhammar in 1951, and Roger Penrose in 1955. Earlier, Erik Ivar Fredholm had introduced the concept of a pseudoinverse of integral operators in 1903. When referring to a matrix, the term pseudoinverse, without further specification, is often used to indicate the Moore–Penrose inverse. The term generalized inverse is sometimes used as a synonym for pseudoinverse.
A common use of the pseudoinverse is to compute a "best fit" (least squares) solution to a system of linear equations that lacks a unique solution (see below under § Applications).
Another use is to find the minimum (Euclidean) norm solution to a system of linear equations with multiple solutions. The pseudoinverse facilitates the statement and proof of results in linear algebra.
The pseudoinverse is defined and unique for all matrices whose entries are real or complex numbers. It can be computed using the singular value decomposition.},
	language = {en},
	urldate = {2019-11-17},
	journal = {Wikipedia},
	month = nov,
	year = {2019},
	note = {Page Version ID: 926414640},
	file = {Snapshot:/home/javinator9889/Zotero/storage/FFBG4Z4X/index.html:text/html}
}